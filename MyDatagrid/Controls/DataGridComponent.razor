@typeparam TItem
<table class="table is-fullwidth">
    <thead>
        <tr>
            @if (Columns == null || Columns.Count <= 0)
            {
                //Create the header with reflection
            }
            else
            {
                //Create the header based on column definition
                @foreach (var column in Columns)
                {
                    <th @onclick="@(()=>SortData(column))" style="cursor:pointer; text-align:@column.Alignment.ToString().ToLower()">@column.Caption<span style="float:right;" class="@(SortClass(column))"> </span></th>
                }
            }
        </tr>
    </thead>
    <tbody>
        @if (DataItems != null)
        {
            @foreach (var item in DataItems.Skip(Paging.NumOfItemsToSkip(CurrentPageNumber)).Take(Paging.NumOfItemsToTake(DataItems.Count)))
            {
                <tr>
                    @if (Columns != null && item != null)
                    {
                        @foreach (var column in Columns)
                        {
                            // <td>@typeof(TItem).GetProperty(column.Datafield).GetValue(item)</td>
                            var itemtype = typeof(TItem);//to get passed data type to tItem (employee)
                            var columndatafield = column.Datafield ?? "nothing";//to get column name from TItem

                            var datafield = itemtype.GetProperty(columndatafield);//to get data type of specified column
                            @if (datafield != null)
                            {
                                var datavalue = datafield.GetValue(item);
                                if (datavalue != null)
                                {
                                    if (column.DataType == DataType.DateTime)
                                    {
                                        datavalue = DateTime.Parse(datavalue.ToString() ?? "").ToString(column.Format);
                                    }
                                    else if (column.DataType == DataType.Boolean)
                                    {
                                        datavalue = bool.Parse(datavalue.ToString() ?? "").ToString();
                                    }
                                    else if (column.DataType == DataType.Currency)
                                    {
                                        datavalue = Math.Round(double.Parse(datavalue.ToString() ?? ""), 2).ToString(column.Format);
                                    }
                                }
                                <td align="@column.Alignment.ToString().ToLower()">@datavalue</td>
                            }
                            else
                            {
                                <td style="">nothing</td>
                            }
                        }
                    }
                </tr>
            }
        }
    </tbody>
</table>
<div class="level">
    <div class="level-left"></div>
    <div class="level-right">
        <div class="level-item">
            @if (Paging != null && Paging.Enabled)
            {
                @if (Paging.CustomPager)
                {
                    @CustomPager
                }
                else
                {
                    <span style="font-size:14px;cursor:pointer;" @onclick="GoToPrevPage"> <b>&lt Previous</b></span>

                    @if (DataItems != null)
                    {
                        <span style="font-size:12px; color:gray; cursor:pointer;">&nbsp;&nbsp; Page @CurrentPageNumber of @Paging.MaxPageNumber(DataItems.Count)&nbsp;&nbsp;</span>
                    }
                    <span style="font-size:14px;cursor:pointer;" @onclick="GoToNextPage"><b>Next &gt</b></span>
                }
            }
        </div>
    </div>
</div>
@code {
    [Parameter]
    public List<TItem> DataItems { get; set; } = new();
    [Parameter]
    public List<ColumnDefinition> Columns { get; set; } = new();
    [Parameter]
    public PagingConfig Paging { get; set; } = new();
    [Parameter]
    public int CurrentPageNumber { get; set; } = 1;
    [Parameter]
    public RenderFragment? CustomPager { get; set; }
    public void GoToPrevPage()
    {
        @if (Paging is not null)
            CurrentPageNumber = Paging.PrevPageNumber(CurrentPageNumber);
    }
    public void GoToNextPage()
    {
        @if (Paging != null && DataItems != null)
            CurrentPageNumber = Paging.NextPageNumber(CurrentPageNumber, DataItems.Count);
    }
    public int MaxPageNumber { get => Paging.MaxPageNumber(DataItems.Count); }
    public string SortClass(ColumnDefinition column)
    {
        if (column.SortDirection != SortDirection.NotSet)
        {
            return $"sort {column.SortDirection.ToString().ToLower()}";
        }
        return "no-sort";
    }
    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        SortData();
    }
    public void SortData(ColumnDefinition sortByColumn=null)
    {
        bool initial = (sortByColumn == null);
        if (sortByColumn==null)
        {
            sortByColumn = Columns.FirstOrDefault(x => x.SortDirection != SortDirection.NotSet);
            if (sortByColumn == null) return;
        }
        foreach (var column in Columns)
        {
            if (column.Datafield != sortByColumn.Datafield) column.SortDirection = SortDirection.NotSet;
        }
        if(!initial)
        switch (sortByColumn.SortDirection)
        {
            case SortDirection.NotSet:
                {
                    sortByColumn.SortDirection = SortDirection.Asc;
                    break;
                }
            case SortDirection.Asc:
                {
                    sortByColumn.SortDirection = SortDirection.Desc;
                    break;
                }
            case SortDirection.Desc:
                {
                    sortByColumn.SortDirection = SortDirection.Asc;
                    break;
                }
            default:
                {
                    sortByColumn.SortDirection = SortDirection.Asc;
                    break;
                }
        }
        if (sortByColumn.SortDirection == SortDirection.Asc)
        {
            DataItems.Sort((x, y) => typeof(TItem).GetProperty(sortByColumn.Datafield).GetValue(x).ToString()
            .CompareTo(typeof(TItem).GetProperty(sortByColumn.Datafield).GetValue(y).ToString()));
        }
        else
        {
            DataItems.Sort((x, y) => typeof(TItem).GetProperty(sortByColumn.Datafield).GetValue(y).ToString()
            .CompareTo(typeof(TItem).GetProperty(sortByColumn.Datafield).GetValue(x).ToString()));
        }
    }
}
